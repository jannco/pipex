done:


undone:
For: ./pipex infile.txt ./script.sh wc outfile.txt
Error: Command that is in the same folder
                 ╷                          ╷
                 │ native                   │ pipex
╺━━━━━━━━━━━━━━━━┿━━━━━━━━━━━━━━━━━━━━━━━━━━┿━━━━━━━━━━━━━━━━━━━━━━━━━╸
 outfile content │        4      16      87 │        0       0       0
                 │                          │

For: ./pipex infile.txt 'sed "s/And/But/"' 'awk "{count++} END {printf \"count: %i\" , count}"' outfile.txt
Error: Argument with escaped double quotes and then a space (\" ,), inside double quotes (awk argument)
                 ╷          ╷
                 │ native   │ pipex
╺━━━━━━━━━━━━━━━━┿━━━━━━━━━━┿━━━━━━╸
 return code     │ 0        │ 2
╶────────────────┼──────────┼──────╴
 outfile content │ count: 4 │


External functs:
open, close, read, write,
malloc, free, perror,
strerror, access, dup, dup2,
execve, exit, fork, pipe,
unlink, wait, waitpid

Subject:
./pipex file1 cmd1 cmd2 file2
< file1 cmd1 | cmd2 > file2

Exemples:
< infile ls -l | wc -l > outfile
< infile grep a1 | wc -w > outfile

Bonus:
This:
         $> ./pipex here_doc LIMITER cmd cmd1 file
Should behave like:
         cmd << LIMITER | cmd1 >> file

#debug
lldb linux & mac
gdb linux

Makefile (if, else)
printenv | grep USER
env

valgrind --leak-check=full --show-leak-kinds=all --track-origins=yes ./pipex infile "ls -l" "wc -l" outfile

https://www.youtube.com/watch?v=5fnVr-zH-SE
https://www.youtube.com/watch?v=OVFEWSP7n8c
https://www.youtube.com/watch?v=6xbLgZpOBi8
https://www.youtube.com/watch?v=Mqb2dVRe0uo
https://www.youtube.com/watch?v=PZrQ4eGm-hM
https://www.youtube.com/watch?v=6u_iPGVkfZ4
https://www.youtube.com/watch?v=tcYo6hipaSA
https://www.youtube.com/watch?v=kCGaRdArSnA
talvez
https://www.youtube.com/watch?v=VzCawLzITh0
